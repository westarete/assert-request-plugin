* Change name to AssertRequest.

* Remove support for checking params values. We've decided that this can't
  and shouldn't be done by assert_request; it should only check the structure
  of the params hash.
  
* Replace nested hashes declaration with one that uses nested procs. This will
  be much more precise. For example:
  
    assert_request do |r|
      r.required :route_figure do |rf|
        rf.required :age
        rf.required :dog => Dog, :except => :asdf
        rf.required :cat => Cat, :except => :spayed
        rf.optional :orientation => Orientation
      end
    end
    
* Add support for declaring lists of allowed params, to replace hashes. e.g.:

    assert_request { |r| r.required :name, :age, :email }
    
* Support hashes at the end of lists of params, e.g.:

    assert_request { |r| r.required :name, :age, :dog => Dog }
    
* When an ActiveRecord class is specified in a param list, presume that the
  params key is the lowercase version of the class name. For example:
  
    assert_request { |r| r.required Person }
    
  is equivalent to:
  
    assert_request { |r| r.required :person => Person }  
    
* Add a new method assert_request_contains, which does not complain if there
  are extra items in the params hash. This allows you to specify a minimum
  requirement for the params without having to specify all the optional 
  elements. For example:
  
    assert_request_contains { |r| r.required :id }
    
  Will not complain if the params hash is {"id"=>"4","name"=>"Johnny"}, but
  it will complain if the "id" element is missing.
  
* Add a new method assert_params_contains, which is shorthand for 
  assert_request_contains with a required clause. For example:
  
    assert_params_contains :id
  
  is just shorthand for:
  
    assert_request_contains { |r| r.required :id }

* Allow string-based declarations for nested elements. This is more succinct
  than block notation when the number of nested params are small. For example:

    assert_params_contains "[:person][:employer_id]"
    
  would be equivalent to:
  
    assert_request_contains do |r|
      r.required :person do |p|
        p.required :employer_id
      end
    end

* See if we can remove the dependency on the parent's environment.rb and 
  boot our own test environment. Then the tests would work whether the plugin
  is installed or not.

* Improve rdoc documentation for public use. README should cover
  justification, installation, and how to handle the resulting exceptions.
  The assert_request method should be documented with the actual usage and
  examples.

* Make new release.

* Blog, post, comment, and email about it. Seek suggestions for improvement.

* I think that forms using alternate methods in forms (such as :method =>
  :put) still show up as request.method == :post.

* Verify that RESTful aspects (the stuff after the semicolon) are supported
  properly. This should be handled at the routing level though, so it should
  be OK -- the stuff after the semicolon should simply get interpreted as the
  action.
