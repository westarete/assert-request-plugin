* Syntactic sugar: Provide a shortcut where if the parameter is an
  ActiveRecord class, then the parameter name is presumed to be the lowercase
  version of the class name. Example:

    assert_request do |r| 
      r.params.must_have Person
    end
    
  is equivalent to:
  
    assert_request do |r| 
      r.params.must_have :person { |p| p.is_a Person }
    end
    
* Add a new method assert_params_must_have, which only checks the params hash
  for the given elements. Ignores any other elements in params. This allows
  you to specify a minimum requirement for the params without having to
  specify all the optional elements. Example:

    assert_params_must_have :id, :name
    
  In a way, this is similar to:
  
    assert_request { |r| r.params.must_have :id, :name }

  however the latter will complain if there are any elements other than :id
  and :name in the params hash, whereas the previous will not.
  
* Add block support for assert_params_must_have, to allow nested elements and
  ActiveRecord types. Example:
  
    assert_params_must_have Dog
    
    assert_params_must_have :fido { |f| f.must_have :name }

* (Undecided) Syntactic sugar: Support string-based declarations for nested
  elements. This is more succinct than block notation when the number of
  nested params are small. Example:

    assert_params_must_have "[:fido][:name]"
    
  would be equivalent to:
  
    assert_params_must_have :fido { |f| f.must_have :name }

* How to handle collections? OK with using plain ruby? or add extra support?

* Update scaffolding to include the appropriate assert_request calls.

* Improve rdoc documentation for public use. README should cover
  justification, installation, and how to handle the resulting exceptions.
  The assert_request method should be documented with the actual usage and
  examples.

* Make new release.

* Blog, post, comment, and email about it. Seek suggestions for improvement.

* I think that forms using alternate methods in forms (such as :method =>
  :put) still show up as request.method == :post.
  
* Find out if we need to ignore _method in the params, or if it's stripped 
  before we even see it.

* Verify that RESTful aspects (the stuff after the semicolon) are supported
  properly. This should be handled at the routing level though, so it should
  be OK -- the stuff after the semicolon should simply get interpreted as the
  action.
