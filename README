== ValidateRequest

This plugin provides an easy way to make sure that your rails actions are 
only called with the method, protocol, and parameters that you expect. 

This can save a considerable amount of error-checking code, uncover hidden
bugs, and prevent security holes. 

For example, here's a typical update action:

  def update
    @person = Person.find params[:id]
    if @person.update_attributes(params[:person])
      flash[:notice] = 'Person was successfully updated.'
      redirect_to :action => 'show', :id => @person
    else
      render :action => 'edit'
    end
  end

This code works fine as long as the request is always well formed, but we need
to plan for incomplete, broken, or simply strange requests, both intentional
and unintentional.

If we were to hand-code all of the contingencies that we might run into while
dealing with anonymous input from the request, we'd have a pretty messy action
that's littered with lots of conditions for detecting and dealing with bad
parameters. 

Instead, we can call assert_request at the beginning of the method to make
sure that the request contains exactly what we expect. This makes the code far
more robust, and saves us from writing a considerable amount of error-checking
code. Here's an example of how we might use assert_request on the same action:

  def update
    assert_request do |r|
      r.method :post
      r.required 'id' => :integer
      r.required 'person' => Person, :except => :company_id
    end
    # the rest of the action is unchanged
  end

This specification now ensures several things for this action:

* The request method must be POST
* The params hash contains an "id" attribute whose value is an integer
* The params hash contains a "person" attribute whose value is a hash that 
  reprsents the Person model, excluding its "company_id" attribute

assert_request examines the Person model, and expands it in place as if you'd
specified all of its attributes by hand.

Now if we receive a request that doesn't match our specification, then the
application will raise a RequestError exception, and we'll get a detailed
message in the logs. In development mode, the exception and its explanation
will be displayed in the browser. In production mode, we can use the
exception_notification plugin to either render a 404 Not Found response, email
us, or both.

For all of the details on usage, see ValidateRequest#assert_request

== Installation

Install the plugin by running the following commands from your rails
application's directory:

  ./script/plugin source svn://rubyforge.org//var/svn/validaterequest/plugins
  ./script/plugin install validate_request

That's it. You're ready to add calls to assert_request to your actions.

== Handling the Exceptions

As mentioned before, the exceptions will go directly to your browser while
in development mode, just like any other exception. In addition, you'll get
detailed information in the logs about what went wrong with the request.

In production mode however, you probably want to change the behavior. Since
assert_request throws a specific type of exception
(ValidateRequest::RequestError), we can catch those at the top level and treat
them differently than a typical Ruby RuntimeException. You can either do this
by overriding the standard rails rescue_action_in_public method, or you can
use the exception_notification plugin (my preferred method).

The exception_notification plugin sends descriptive emails to a given address
when your application encounters errors while running in production mode. We
can modify it slightly so that it either 

If you're not going to use exception_notifier, and you just want assert_request
to log the error and display the 404 Not Found page, then you can define a 
simple rescue_action_in_public in your application.rb, such as this one, which
piggybacks onto the existing rescue_action_in_public:

  def rescue_action_in_public_with_request_error(exception)
    if exception.kind_of? ValidateRequest::RequestError
      render :file => "#{RAILS_ROOT}/public/404.html", :status => "404 Not Found"
    end
  end

  alias_method_chain :rescue_action_in_public, :request_error

== Author

  Scott A. Woods
  West Arete Computing, Inc.
  http://westarete.com
  scott at westarete dot com
